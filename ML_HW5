{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "HW5_96110204.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "5nxJLG6etL0E"
      },
      "source": [
        "%matplotlib inline\n",
        "import numpy as np\n",
        "from scipy import optimize as op\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import seaborn as sb\n",
        "import pandas as pd\n",
        "from sklearn import datasets\n",
        "\n",
        "from math import ceil\n",
        "from sklearn.metrics import confusion_matrix \n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bVxBjKnIUd0t"
      },
      "source": [
        "در این سوال عملی با دو مدل این مساله را نمایش دادم حالت اول که آمده حالتی است که کلاس بندی بین دو دسته از گل ها آمده است و همان طور ک ه سوال خواسته بود روی تمام داده ها سوال انجام شده بود، در صورتی که حالت دوم که رگیولازایزیشن هم به آن اضافه شده است، با تغییر دادن لاندا به صورت های مختلف اکیورسی دست یافتیم و کلاس بندی بین همان ۳ دسته از گل ها انجام شده است.."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2Mun3p-8qb-V"
      },
      "source": [
        "iris = datasets.load_iris()"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "9Wyze_0M1_gB",
        "outputId": "8a9f71b4-1eb8-4bef-c6f8-faad2f557259"
      },
      "source": [
        "iris = pd.read_csv('Iris.csv')\n",
        "iris.head()"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>SepalLengthCm</th>\n",
              "      <th>SepalWidthCm</th>\n",
              "      <th>PetalLengthCm</th>\n",
              "      <th>PetalWidthCm</th>\n",
              "      <th>Species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
              "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
              "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
              "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
              "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
              "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_yXiK-GzU8yW"
      },
      "source": [
        " X = iris.data[:, :2]\n",
        " y = (iris.target != 0) * 1\n"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "OfoMohJVV17G",
        "outputId": "b320845b-18dd-403b-d2f1-ee324080f51a"
      },
      "source": [
        "plt.figure(figsize=(8, 5))\n",
        "# plot with respect to petal length\n",
        "plt.scatter(X[y == 0][:, 0], X[y == 0][:, 1], color='green', label='0')\n",
        "\n",
        "plt.scatter(X[y == 1][:, 0], X[y == 1][:, 1], color='purple', label='1')\n",
        "plt.legend();\n"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RK4zS0SK2kT0"
      },
      "source": [
        "Species = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X-rE2fML6caO"
      },
      "source": [
        "for Logistic Regression we need to consider binary results\n",
        "setosa = 0, virginica = 1, also we will analyse  the sepal and petal information"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4JsSxalyyOUz"
      },
      "source": [
        "#LOGISTIC REGRESSION PART 1\n",
        "\n",
        "class LogisticRegression:\n",
        "    def __init__(self, lr=0.01, num_iter=100000, fit_bool=True):\n",
        "\n",
        "        self.lr = lr\n",
        "        self.fit_bool = fit_bool\n",
        "        self.num_iter = num_iter\n",
        "        \n",
        "       # self.loss = loss\n",
        "    \n",
        "    def initialize(self, X):\n",
        "        intercept = np.ones((X.shape[0], 1))\n",
        "        return np.concatenate((intercept, X), axis=1)\n",
        "    \n",
        "    def sigmoid(self, z):\n",
        "        return 1 / (1 + np.exp(-z))\n",
        "\n",
        "   # def L2_req(lambda, weights):\n",
        "    def plot_loss(l):\n",
        "      plt.plot(l)\n",
        "\n",
        "    def loss_func(self, h, y):\n",
        "        return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()\n",
        "    \n",
        "    def predict_prob(self, X):\n",
        "        if self.fit_bool:\n",
        "            X = self.initialize(X)\n",
        "        return self.sigmoid(np.dot(X, self.theta))\n",
        "    \n",
        "    def predict(self, X):\n",
        "        return self.predict_prob(X).round()\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        if self.fit_bool:\n",
        "            X = self.initialize(X)\n",
        "        self.theta = np.zeros(X.shape[1])\n",
        "        \n",
        "        for i in range(self.num_iter):\n",
        "            z = np.dot(X, self.theta)\n",
        "            h = self.sigmoid(z)\n",
        "            len =  y.size\n",
        "            gradient = np.dot((X.T),(h - y)) /len\n",
        "            self.theta -= self.lr * gradient\n",
        "            \n",
        "            z = np.dot(X, self.theta)\n",
        "            h = self.sigmoid(z)\n",
        "            loss = self.loss_func(h, y)\n",
        "                \n",
        "            if(i % 10000 == 0):\n",
        "              print(f'loss: {loss} \\t')\n",
        "           # return loss\n",
        "             # self.plot_loss()\n",
        "\n"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2-h922fqKKAy"
      },
      "source": [
        "model = LogisticRegression(lr=0.1, num_iter=500000)\n"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xLSXU3xhi-D",
        "outputId": "a77d55d3-147a-473c-ab45-ee96da2c6ada"
      },
      "source": [
        "%time loss =  model.fit(X, y)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "loss: 0.6106904453410645 \t\n",
            "loss: 0.03432718644226483 \t\n",
            "loss: 0.02878665213455816 \t\n",
            "loss: 0.025718548517683616 \t\n",
            "loss: 0.02340842758463659 \t\n",
            "loss: 0.021507024522720526 \t\n",
            "loss: 0.019892368181604822 \t\n",
            "loss: 0.0185031664409479 \t\n",
            "loss: 0.017299193592041292 \t\n",
            "loss: 0.016249738703587754 \t\n",
            "loss: 0.015329838490314577 \t\n",
            "loss: 0.014518833591009722 \t\n",
            "loss: 0.013799605037762784 \t\n",
            "loss: 0.013158006956155629 \t\n",
            "loss: 0.012582374964505384 \t\n",
            "loss: 0.012063092454345654 \t\n",
            "loss: 0.011592216936374905 \t\n",
            "loss: 0.01116316678090668 \t\n",
            "loss: 0.010770464048285664 \t\n",
            "loss: 0.01040952627650975 \t\n",
            "loss: 0.01007649925054516 \t\n",
            "loss: 0.009768123172684362 \t\n",
            "loss: 0.009481625616205877 \t\n",
            "loss: 0.009214635760287644 \t\n",
            "loss: 0.008965115461932606 \t\n",
            "loss: 0.008731303635409655 \t\n",
            "loss: 0.008511671162408274 \t\n",
            "loss: 0.008304884158053572 \t\n",
            "loss: 0.008109773891466268 \t\n",
            "loss: 0.007925312028698209 \t\n",
            "loss: 0.007750590152401873 \t\n",
            "loss: 0.007584802734702061 \t\n",
            "loss: 0.0074272329120746465 \t\n",
            "loss: 0.007277240545035451 \t\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:20: RuntimeWarning: divide by zero encountered in log\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:20: RuntimeWarning: invalid value encountered in multiply\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "loss: nan \t\n",
            "CPU times: user 22.4 s, sys: 255 ms, total: 22.6 s\n",
            "Wall time: 22.4 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QJtjPwQ_qIb2"
      },
      "source": [
        ""
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lpmd5UsuWnTi"
      },
      "source": [
        "\n",
        "y_pred = model.predict(X)\n",
        "# Predict probabilities\n",
        "probs_y = model.predict_prob(X)"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2aPaP7sUipwl",
        "outputId": "f554801d-07d1-495e-b9df-a1fc6058c900"
      },
      "source": [
        "print( y_pred)\n",
        "print(\"the prob values are:\")\n",
        "print(probs_y)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1.]\n",
            "the prob values are:\n",
            "[4.74537135e-05 4.41879603e-03 1.22506211e-05 1.26739445e-05\n",
            " 2.49320398e-06 9.65788622e-06 1.45040253e-07 4.90934293e-05\n",
            " 1.35649805e-05 9.99194894e-04 1.90147005e-04 2.66848946e-06\n",
            " 1.03368708e-03 7.12677151e-07 7.36172564e-04 4.42933628e-07\n",
            " 9.65788622e-06 4.74537135e-05 3.37077572e-03 5.43077589e-07\n",
            " 1.63471715e-02 2.40992745e-06 7.36550977e-09 9.33621737e-04\n",
            " 2.66848946e-06 1.86821133e-02 4.90934293e-05 2.03512664e-04\n",
            " 9.02465523e-04 1.22506211e-05 2.33127813e-04 1.63471715e-02\n",
            " 2.66576848e-08 4.74074283e-07 9.99194894e-04 9.65852531e-04\n",
            " 1.58097840e-02 5.81258908e-07 3.05689722e-06 2.10543707e-04\n",
            " 1.10636133e-05 3.07620698e-01 1.55237378e-07 1.10636133e-05\n",
            " 5.43077589e-07 1.03368708e-03 5.43077589e-07 2.85609841e-06\n",
            " 4.43367444e-05 2.17817607e-04 1.00000000e+00 9.99998550e-01\n",
            " 1.00000000e+00 9.99998932e-01 9.99999999e-01 9.99900154e-01\n",
            " 9.99972411e-01 9.71339332e-01 9.99999999e-01 9.68361598e-01\n",
            " 9.99982260e-01 9.99893135e-01 1.00000000e+00 9.99998691e-01\n",
            " 9.98102936e-01 9.99999996e-01 9.91636232e-01 9.99994754e-01\n",
            " 1.00000000e+00 9.99995098e-01 9.97899826e-01 9.99999705e-01\n",
            " 1.00000000e+00 9.99999705e-01 9.99999983e-01 9.99999996e-01\n",
            " 1.00000000e+00 9.99999999e-01 9.99994385e-01 9.99994929e-01\n",
            " 9.99995262e-01 9.99995262e-01 9.99994754e-01 9.99999715e-01\n",
            " 8.65668130e-01 9.90430503e-01 9.99999996e-01 1.00000000e+00\n",
            " 9.91636232e-01 9.99978976e-01 9.99906712e-01 9.99994191e-01\n",
            " 9.99998818e-01 9.98452215e-01 9.99903489e-01 9.98037510e-01\n",
            " 9.99557080e-01 9.99999695e-01 9.92933565e-01 9.99900154e-01\n",
            " 9.99972411e-01 9.99994754e-01 1.00000000e+00 9.99999929e-01\n",
            " 9.99999983e-01 1.00000000e+00 8.84223529e-01 1.00000000e+00\n",
            " 1.00000000e+00 9.99999995e-01 9.99999662e-01 9.99999999e-01\n",
            " 1.00000000e+00 9.99998857e-01 9.99976720e-01 9.99998550e-01\n",
            " 9.99999983e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00\n",
            " 9.99999999e-01 9.99571868e-01 1.00000000e+00 9.99999996e-01\n",
            " 9.99999918e-01 1.00000000e+00 9.99999931e-01 9.99994191e-01\n",
            " 9.99999996e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00\n",
            " 9.99999996e-01 9.99999984e-01 9.99999985e-01 1.00000000e+00\n",
            " 9.99877582e-01 9.99999673e-01 9.99975084e-01 1.00000000e+00\n",
            " 9.99999996e-01 1.00000000e+00 9.99994754e-01 9.99999996e-01\n",
            " 9.99999918e-01 9.99999999e-01 1.00000000e+00 9.99999983e-01\n",
            " 9.99475121e-01 9.99893135e-01]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "53rAWwgNWq48"
      },
      "source": [
        ""
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "NoTuUJOAlPSL",
        "outputId": "a6fbeb29-3297-4bd9-c3ef-7f68b5cfdbc9"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(y, y_pred)\n",
        "print(cm)\n",
        "sb.heatmap(cm, annot = True)\n"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 50   0]\n",
            " [  0 100]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f98251885c0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ywRsHPrPSq8t"
      },
      "source": [
        "def accuracy(y_true, y_pred):\n",
        "  accuracy = np.sum (y_true == y_pred)/ len(y_true) * 100\n",
        "  return accuracy"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LP2mYMR1-98T",
        "outputId": "df7bf2bc-bccf-4ebd-ac93-62d15ba537fd"
      },
      "source": [
        "print(\"the  Accuracy : \" , accuracy(y, y_pred))\n",
        "print(\"the  misclassified number: \" ,len(y) - (y == y_pred).mean() * len(y_pred) )"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the  Accuracy :  100.0\n",
            "the  misclassified number:  0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pQYmn28msJni"
      },
      "source": [
        "در بخش بالا همانطور که می بینیم به وضوح خط جدا کنند برای رگرسیون لاجستیک به وضوح به دیتا های ترینینگ داده شده اورفیت شده است و اکیورسی آن‌ها ۱۰۰ درصد شده است  فلذا باید برای جلوگیری از این مساله  از رگیولایزر استفاده کنیم که در بخش بعدی انجام می‌دهیم.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ykjeBpyN-ffD"
      },
      "source": [
        ""
      ],
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w8vrOlPZHlQH"
      },
      "source": [
        "PART 2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xeVWR79wAcYe"
      },
      "source": [
        "\n",
        "m = iris.shape[0]\n",
        "\n",
        "# INITIALIZING PART \n",
        "X = np.ones((m,n + 1))\n",
        "y = np.array((m,1))\n",
        "\n",
        "y = iris['Species'].values\n",
        "\n",
        "X[:,1] = iris['PetalLengthCm'].values\n",
        "X[:,2] = iris['PetalWidthCm'].values\n",
        "X[:,3] = iris['SepalLengthCm'].values\n",
        "X[:,4] = iris['SepalWidthCm'].values\n",
        "i = 0\n",
        "for j in range(n):\n",
        "  X[:, j] = (X[:, j] - X[:,j].mean())\n",
        "\n",
        "# seperating the test and train data set\n",
        "Species = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']\n",
        "# dedicate 20 percent of the data for test.\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 11)\n",
        " "
      ],
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SE1IuECXZCS7"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "veE2cEymZDIN"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Gp-FvzIBPQd"
      },
      "source": [
        "# logistic regression  with L2 regularization \n",
        "\n",
        "  \n",
        "\n",
        "def sigmoid(z):\n",
        "    return 1.0 / (1 + np.exp(-z))\n",
        "\n",
        "def Cost_Function(theta, X, y, _lambda = 0.1):\n",
        "    h = sigmoid(X.dot(theta))\n",
        "    reg = (_lambda/(2 * m)) * np.sum(theta**2)\n",
        "    return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean() + reg\n",
        "\n",
        "def logisticRegression(X, y, theta):\n",
        "    result = op.minimize(fun = Cost_Function, x0 = theta, args = (X, y),\n",
        "                         method = 'TNC', jac = regGradient)\n",
        "    return result.x  \n",
        "\n",
        "def regGradient(theta, X, y, _lambda = 0.1):\n",
        "    m, n = X.shape\n",
        "    theta = theta.reshape((n, 1))\n",
        "    y = y.reshape((m, 1))\n",
        "    h = sigmoid(X.dot(theta))\n",
        "    reg = _lambda * theta /m\n",
        "\n",
        "    return ((1 / m) * X.T.dot(h - y)) + reg\n",
        "\n",
        "\n"
      ],
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rDH25OQlBXpK"
      },
      "source": [
        "\n",
        "\n",
        "init = np.zeros((3, 4 + 1))\n",
        "\n",
        "for irises in Species:\n",
        "    yi= np.array(y_train == irises, dtype = int)\n",
        "    optTheta = logisticRegression(X_train, yi, np.zeros((n + 1,1)))\n",
        "    init[i] = optTheta\n",
        "    i += 1"
      ],
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mnwxN5NuBb_e",
        "outputId": "38b32eb6-7998-470b-ca30-e8980734cf03"
      },
      "source": [
        "P = sigmoid(X_test.dot(init.T)) \n",
        "p = [Species[np.argmax(P[i, :])] for i in range(X_test.shape[0])]\n",
        "\n",
        "print(\"Test Accuracy \", accuracy(y_test, p) , '%')"
      ],
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test Accuracy  96.66666666666667 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "SfbyfBBmGYyN",
        "outputId": "5319681a-ff88-45c7-ea72-e2fb8ce79485"
      },
      "source": [
        "conf_matrix = confusion_matrix(y_test, p, labels = Species)\n",
        "sb.heatmap(conf_matrix, annot = True, xticklabels = Species, yticklabels = Species);"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H_HzaNWzuoEe"
      },
      "source": [
        "class Perceptron:\n",
        "\n",
        "    def __init__(self, lr=0.1):\n",
        "        self.lr= lr\n",
        "        self.b = 0.0  \n",
        "        self.weights = None  \n",
        "        self.misclassified_samples = []\n",
        "\n",
        "    def prob(self, x: np.array):\n",
        "        return np.dot(x, self.weights) + self.b\n",
        "\n",
        "    \n",
        "        \n",
        "    def predict(self, x: np.array):\n",
        "      # if self.prob(x) >= 0:\n",
        "      #   return np(1)\n",
        "      # else:\n",
        "      #   return np(-1)\n",
        "     return np.where(self.prob(x) >= 0, 1, -1)\n",
        "\n",
        "    def fit(self, x: np.array, y: np.array, n_iter=10):\n",
        "        self.b = 0.0\n",
        "        self.weights = np.zeros(x.shape[1])\n",
        "        self.misclassified_samples = []\n",
        "\n",
        "        for _ in range(n_iter):\n",
        "            mis = 0\n",
        "            for xi, yi in zip(x, y):\n",
        "                res= self.lr * (yi - self.predict(xi))\n",
        "                self.b += res\n",
        "                self.weights += res * xi\n",
        "                mis += int(res!= 0.0 )\n",
        "\n",
        "            self.misclassified_samples.append(mis)\n",
        "\n",
        "   \n",
        "  \n"
      ],
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "uTNZMYjxcXGS",
        "outputId": "eabf570d-55b5-406b-af88-f9fffae40ea2"
      },
      "source": [
        "\n",
        "y = iris.iloc[:, 4].values\n",
        "x = iris.iloc[:, 0:3].values\n",
        "x = x[0:100, 0:2] \n",
        "y = y[0:100]\n",
        "\n",
        "\n",
        "\n",
        "# for j in range(n):\n",
        "#   x[:, j] = (x[:, j] - x[:,j].mean())\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20,  random_state=0)\n",
        "perc = Perceptron(lr=0.01)\n",
        "perc.fit(x_train, y_train)\n",
        "plt.plot(range(1, len(perc.misclassified_samples) + 1), perc.misclassified_samples, marker='.')\n",
        "plt.xlabel('epochs')\n",
        "plt.ylabel('loss')\n",
        "plt.show()"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oQkQBGX0dM0V",
        "outputId": "b3f19624-a687-4676-c530-687eaea807f3"
      },
      "source": [
        "print(len(perc.misclassified_samples))"
      ],
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}